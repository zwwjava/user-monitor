package com.qs.monitor;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import lombok.extern.slf4j.Slf4j;/** * @author zhaww * @date 2020/4/13 * @Description . */@Slf4jpublic class CodeGenerator {    public static void main(String[] args) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/src/main/java");        gc.setAuthor("zww"); //设置生成作者        gc.setFileOverride(true);        gc.setOpen(false);        // 通用名称        gc.setEntityName("%sEntity");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://47.114.54.29:3306/monitor?allowMultiQueries=true");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("oxuyow80");        /*dsc.setUrl("jdbc:mysql://118.31.184.240:3306/zyddtest?allowMultiQueries=true");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("3wHNY2Bq");*/        /*dsc.setUrl("jdbc:mysql://118.31.184.240:3306/dw_test?allowMultiQueries=true&characterEncoding=utf8");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("3wHNY2Bq");*/        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setParent("com.qs.monitor");        pc.setServiceImpl(pc.getService());        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };       /* // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List<FileOutConfig> focList = new ArrayList<>();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/" + pc.getModuleName()                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });        *//*        cfg.setFileCreate(new IFileCreate() {            @Override            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {                // 判断自定义文件夹是否需要创建                checkDir("调用默认方法创建的目录");                return false;            }        });        *//*        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        // 配置自定义输出模板        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别        // templateConfig.setEntity("templates/entity2.java");        // templateConfig.setService();        // templateConfig.setController();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);*/        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setSkipView(true);//        strategy.setEntityTableFieldAnnotationEnable(true);        strategy.setSuperEntityClass("com.qs.monitor.entity.BaseEntity");//        strategy.setSuperControllerClass("com.third.controller.BaseController");        strategy.setSuperEntityColumns("id", "del_flag", "update_time", "create_time", "version");        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(true);        strategy.setControllerMappingHyphenStyle(true);        strategy.setTablePrefix(pc.getModuleName() + "_");        //生成的表，排除在外的//        strategy.setExclude("");        //生成的表        strategy.setInclude("user_account");        mpg.setStrategy(strategy);        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }}